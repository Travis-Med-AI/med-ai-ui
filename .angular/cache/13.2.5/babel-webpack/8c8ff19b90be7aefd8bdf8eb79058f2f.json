{"ast":null,"code":"import { Sockets } from 'med-ai-common';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"ngx-socket-io\";\nimport * as i3 from \"./settings.service\";\nexport let EvalService = /*#__PURE__*/(() => {\n  class EvalService {\n    constructor(http, socket, settingsSerivce) {\n      this.http = http;\n      this.socket = socket;\n      this.settingsSerivce = settingsSerivce;\n      this.baseUrl = `${this.settingsSerivce.getServerUrl()}/evals`;\n    }\n\n    getEvals(page, pageSize, searchString) {\n      let params = {\n        page: `${page}`,\n        pageSize: `${pageSize}`,\n        searchString\n      };\n      return this.http.get(this.baseUrl, {\n        params\n      });\n    }\n\n    evalDicom(modelId, studyId) {\n      return this.http.get(`${this.baseUrl}/${modelId}/${studyId}`);\n    }\n\n    deleteEval(evalId) {\n      return this.http.delete(`${this.baseUrl}/${evalId}`);\n    }\n\n    getOutputImage(evalId) {\n      this.http.get(`${this.baseUrl}/output-image?evalId=${evalId}`, {\n        responseType: 'arraybuffer'\n      }) //set response Type properly (it is not part of headers)\n      .toPromise().then(data => {\n        // may be you need to use data._body to get data of body\n        var blob = new Blob([data], {\n          type: 'image/jpeg'\n        });\n        var url = window.URL.createObjectURL(blob);\n        window.open(url);\n      }).catch(err => console.error(\"download error = \", err));\n    }\n\n    getOutputImageUrl(evalId) {\n      return `${this.baseUrl}/output-image?evalId=${evalId}`;\n    }\n\n    getLogSocket(evalId) {\n      return this.socket.fromEvent(`${Sockets.modelLog}-${evalId}`);\n    }\n\n    getLog(evalId) {\n      return this.http.get(`${this.baseUrl}/logs`, {\n        params: {\n          evalId: evalId.toString()\n        }\n      });\n    }\n\n  }\n\n  EvalService.ɵfac = function EvalService_Factory(t) {\n    return new (t || EvalService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Socket), i0.ɵɵinject(i3.SettingsService));\n  };\n\n  EvalService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: EvalService,\n    factory: EvalService.ɵfac,\n    providedIn: 'root'\n  });\n  return EvalService;\n})();","map":null,"metadata":{},"sourceType":"module"}