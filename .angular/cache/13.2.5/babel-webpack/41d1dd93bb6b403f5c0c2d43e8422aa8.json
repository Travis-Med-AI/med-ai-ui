{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component, ViewChild, ViewEncapsulation } from '@angular/core';\nimport { FormControl } from '@angular/forms';\nimport { Notifications } from 'med-ai-common';\nimport { debounceTime } from 'rxjs/operators';\nimport { Subject } from 'rxjs';\nimport { NgxMasonryComponent } from 'ngx-masonry';\nimport { StdoutDialogComponent } from './stdout-dialog/stdout-dialog.component';\nimport { EvalImageDialogComponent } from './eval-image-dialog/eval-image-dialog.component';\nlet EvalsComponent = class EvalsComponent {\n  constructor(evalService, notficiationService, deviceService, studyService, dialog) {\n    this.evalService = evalService;\n    this.notficiationService = notficiationService;\n    this.deviceService = deviceService;\n    this.studyService = studyService;\n    this.dialog = dialog;\n    this.searchControl = new FormControl('');\n    this.evals = [];\n    this.totalVisible = 30;\n    this.pageIndex = 0;\n    this.pageSize = 10;\n    this.evalIdChange = new Subject();\n    this.columns = [{\n      name: 'Study Id',\n      selector: e => e.orthancId\n    }, {\n      name: 'Status',\n      selector: e => e.status\n    }, {\n      name: 'Output',\n      selector: e => e.modelOutput ? e.modelOutput.display : 'TBD'\n    }];\n    this.masonryConfig = {\n      // gutter: 1,\n      fitWidth: true,\n      horizontalOrder: true\n    };\n  }\n\n  ngOnInit() {\n    this.fetchEvals();\n    this.searchControl.valueChanges.pipe(debounceTime(500)).subscribe(s => {\n      this.fetchEvals();\n    });\n    this.notficiationService.watchNotificationTypes([Notifications.newResult, Notifications.evalFailed, Notifications.evalStarted]).subscribe(n => this.fetchEvals());\n  }\n\n  fetchEvals() {\n    console.log(`requesting evals for page ${this.pageIndex} with size ${this.totalVisible}`);\n    this.evalService.getEvals(this.pageIndex, this.totalVisible, this.searchControl.value).subscribe(res => {\n      this.evals = res.payload;\n      this.masonry.reloadItems();\n      this.masonry.layout();\n    });\n  }\n\n  getImage(id) {\n    this.evalService.getOutputImage(id);\n  }\n\n  deleteEval(evalId) {\n    this.evalService.deleteEval(evalId).subscribe(r => {\n      this.fetchEvals();\n      this.notficiationService.showNotification('successfully deleted eval');\n    });\n  }\n\n  onScrollUp() {}\n\n  onScrollDown() {\n    this.totalVisible += this.pageSize;\n    this.fetchEvals();\n  }\n\n  viewLogs(studyEval) {\n    const dialogRef = this.dialog.open(StdoutDialogComponent, {\n      data: studyEval,\n      height: '75vh'\n    });\n  }\n\n  onClose() {\n    this.evalIdChange.next(null);\n  }\n\n  setEvalVisible(id) {\n    this.visibleEval = id;\n    this.masonry.layout();\n  }\n\n  imgLoad() {\n    this.masonry.reloadItems();\n    this.masonry.layout();\n  }\n\n  openImageDialog(evalId) {\n    let src = this.evalService.getOutputImageUrl(evalId);\n    const dialogRef = this.dialog.open(EvalImageDialogComponent, {\n      data: src,\n      height: '50vh'\n    });\n  }\n\n};\n\n__decorate([ViewChild(NgxMasonryComponent)], EvalsComponent.prototype, \"masonry\", void 0);\n\nEvalsComponent = __decorate([Component({\n  selector: 'app-evals',\n  templateUrl: './evals.component.html',\n  styleUrls: ['./evals.component.scss'],\n  encapsulation: ViewEncapsulation.None\n})], EvalsComponent);\nexport { EvalsComponent };","map":null,"metadata":{},"sourceType":"module"}