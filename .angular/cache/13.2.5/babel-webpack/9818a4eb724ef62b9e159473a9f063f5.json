{"ast":null,"code":"import { FormControl } from '@angular/forms';\nimport { Notifications } from 'med-ai-common';\nimport { debounceTime } from 'rxjs/operators';\nimport { Subject } from 'rxjs';\nimport { NgxMasonryComponent } from 'ngx-masonry';\nimport { StdoutDialogComponent } from './stdout-dialog/stdout-dialog.component';\nimport { EvalImageDialogComponent } from './eval-image-dialog/eval-image-dialog.component';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../services/eval.service\";\nimport * as i2 from \"../services/notification.service\";\nimport * as i3 from \"ngx-device-detector\";\nimport * as i4 from \"../services/study.service\";\nimport * as i5 from \"@angular/material/dialog\";\nimport * as i6 from \"@angular/flex-layout/flex\";\nimport * as i7 from \"@angular/material/form-field\";\nimport * as i8 from \"@angular/material/input\";\nimport * as i9 from \"@angular/forms\";\nexport let EvalsComponent = /*#__PURE__*/(() => {\n  class EvalsComponent {\n    constructor(evalService, notficiationService, deviceService, studyService, dialog) {\n      this.evalService = evalService;\n      this.notficiationService = notficiationService;\n      this.deviceService = deviceService;\n      this.studyService = studyService;\n      this.dialog = dialog;\n      this.searchControl = new FormControl('');\n      this.evals = [];\n      this.totalVisible = 30;\n      this.pageIndex = 0;\n      this.pageSize = 10;\n      this.evalIdChange = new Subject();\n      this.columns = [{\n        name: 'Study Id',\n        selector: e => e.orthancId\n      }, {\n        name: 'Status',\n        selector: e => e.status\n      }, {\n        name: 'Output',\n        selector: e => e.status\n      }];\n      this.masonryConfig = {\n        // gutter: 1,\n        fitWidth: true,\n        horizontalOrder: true\n      };\n    }\n\n    ngOnInit() {\n      this.fetchEvals();\n      this.searchControl.valueChanges.pipe(debounceTime(500)).subscribe(s => {\n        this.fetchEvals();\n      });\n      this.notficiationService.watchNotificationTypes([Notifications.newResult, Notifications.evalFailed, Notifications.evalStarted]).subscribe(n => this.fetchEvals());\n    }\n\n    fetchEvals() {\n      console.log(`requesting evals for page ${this.pageIndex} with size ${this.totalVisible}`);\n      this.evalService.getEvals(this.pageIndex, this.totalVisible, this.searchControl.value).subscribe(res => {\n        this.evals = res.payload;\n        this.masonry.reloadItems();\n        this.masonry.layout();\n      });\n    }\n\n    getImage(id) {\n      this.evalService.getOutputImage(id);\n    }\n\n    deleteEval(evalId) {\n      this.evalService.deleteEval(evalId).subscribe(r => {\n        this.fetchEvals();\n        this.notficiationService.showNotification('successfully deleted eval');\n      });\n    }\n\n    onScrollUp() {}\n\n    onScrollDown() {\n      this.totalVisible += this.pageSize;\n      this.fetchEvals();\n    }\n\n    viewLogs(studyEval) {\n      const dialogRef = this.dialog.open(StdoutDialogComponent, {\n        data: studyEval,\n        height: '75vh'\n      });\n    }\n\n    onClose() {\n      this.evalIdChange.next(null);\n    }\n\n    setEvalVisible(id) {\n      this.visibleEval = id;\n      this.masonry.layout();\n    }\n\n    imgLoad() {\n      this.masonry.reloadItems();\n      this.masonry.layout();\n    }\n\n    openImageDialog(evalId) {\n      let src = this.evalService.getOutputImageUrl(evalId);\n      const dialogRef = this.dialog.open(EvalImageDialogComponent, {\n        data: src,\n        height: '50vh'\n      });\n    }\n\n  }\n\n  EvalsComponent.ɵfac = function EvalsComponent_Factory(t) {\n    return new (t || EvalsComponent)(i0.ɵɵdirectiveInject(i1.EvalService), i0.ɵɵdirectiveInject(i2.NotificationService), i0.ɵɵdirectiveInject(i3.DeviceDetectorService), i0.ɵɵdirectiveInject(i4.StudyService), i0.ɵɵdirectiveInject(i5.MatDialog));\n  };\n\n  EvalsComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: EvalsComponent,\n    selectors: [[\"app-evals\"]],\n    viewQuery: function EvalsComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(NgxMasonryComponent, 5);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.masonry = _t.first);\n      }\n    },\n    decls: 8,\n    vars: 1,\n    consts: [[\"fxLayout\", \"column\", \"fxLayoutAlign\", \"top center\"], [\"fxLayout\", \"row\", \"fxLayoutAlign\", \"space-around\"], [1, \"search-bar\"], [\"fxFill\", \"\"], [\"matInput\", \"\", \"placeholder\", \"Search\", 3, \"formControl\"]],\n    template: function EvalsComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1)(2, \"div\", 2)(3, \"mat-form-field\", 3)(4, \"mat-label\");\n        i0.ɵɵtext(5, \"Search\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(6, \"input\", 4);\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵelement(7, \"div\");\n        i0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵadvance(6);\n        i0.ɵɵproperty(\"formControl\", ctx.searchControl);\n      }\n    },\n    directives: [i6.DefaultLayoutDirective, i6.DefaultLayoutAlignDirective, i7.MatFormField, i6.FlexFillDirective, i7.MatLabel, i8.MatInput, i9.DefaultValueAccessor, i9.NgControlStatus, i9.FormControlDirective],\n    styles: [\".eval-table{width:100%}.search-bar{padding:1rem}.eval{max-height:15rem;width:45%;margin:1rem}.avatar-default{background-color:#00f}.avatar{width:3rem;height:3rem;-o-object-fit:cover;object-fit:cover;border-radius:50%}.clickable{cursor:pointer}.item{width:20rem;margin-left:1rem;margin-bottom:1rem;min-height:8rem}.container{width:100%;max-height:100%}.class-probs{height:10rem;overflow:auto}\\n\"],\n    encapsulation: 2\n  });\n  return EvalsComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}