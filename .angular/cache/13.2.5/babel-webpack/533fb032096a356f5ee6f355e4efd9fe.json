{"ast":null,"code":"import { interval, Subject } from 'rxjs';\nimport { startWith, switchMap, takeUntil } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../services/monitor.service\";\nimport * as i2 from \"@angular/flex-layout/flex\";\nimport * as i3 from \"@angular/common\";\n\nfunction MonitorComponent_div_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\")(1, \"h2\");\n    i0.ɵɵtext(2, \" GPU \");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"div\");\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(5, \"div\");\n    i0.ɵɵtext(6);\n    i0.ɵɵelementEnd()();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(4);\n    i0.ɵɵtextInterpolate1(\"Temp: \", ctx_r0.gpuInfo.temp, \"\");\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate2(\"Memory Usage: \", ctx_r0.gpuInfo.usedMemory, \"/\", ctx_r0.gpuInfo.totalMemory, \" MB\");\n  }\n}\n\nfunction MonitorComponent_div_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\")(1, \"h2\");\n    i0.ɵɵtext(2, \" CPU \");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"div\");\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(5, \"div\");\n    i0.ɵɵtext(6);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(7, \"div\");\n    i0.ɵɵtext(8);\n    i0.ɵɵpipe(9, \"number\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(10, \"div\");\n    i0.ɵɵtext(11);\n    i0.ɵɵpipe(12, \"number\");\n    i0.ɵɵpipe(13, \"number\");\n    i0.ɵɵelementEnd()();\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(4);\n    i0.ɵɵtextInterpolate1(\"Threads: \", ctx_r1.cpuInfo.threads, \"\");\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\"Temp: \", ctx_r1.cpuInfo.temp, \"\");\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\"Usage: \", i0.ɵɵpipeBind1(9, 5, ctx_r1.cpuInfo.usage), \"%\");\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate2(\"Memory Usage: \", i0.ɵɵpipeBind1(12, 7, ctx_r1.cpuInfo.ram.used), \"/\", i0.ɵɵpipeBind1(13, 9, ctx_r1.cpuInfo.ram.total), \" MB\");\n  }\n}\n\nexport let MonitorComponent = /*#__PURE__*/(() => {\n  class MonitorComponent {\n    constructor(monitorService) {\n      this.monitorService = monitorService;\n      this.notifier = new Subject();\n    }\n\n    ngOnInit() {\n      interval(2000).pipe(startWith(0), takeUntil(this.notifier), switchMap(() => this.monitorService.getGpuInfo())).subscribe(gpuInfo => this.gpuInfo = gpuInfo);\n      interval(5000).pipe(startWith(0), takeUntil(this.notifier), switchMap(() => this.monitorService.getCpuInfo())).subscribe(cpuInfo => this.cpuInfo = cpuInfo);\n    }\n\n    ngOnDestroy() {\n      this.notifier.next(null);\n      this.notifier.complete();\n    }\n\n  }\n\n  MonitorComponent.ɵfac = function MonitorComponent_Factory(t) {\n    return new (t || MonitorComponent)(i0.ɵɵdirectiveInject(i1.MonitorService));\n  };\n\n  MonitorComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: MonitorComponent,\n    selectors: [[\"app-monitor\"]],\n    decls: 4,\n    vars: 2,\n    consts: [[\"fxLayoutAlign\", \"center center\", \"fxLayout\", \"column\"], [\"fxLayoutGap\", \"2rem\", \"fxLayout\", \"column\"], [4, \"ngIf\"]],\n    template: function MonitorComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1);\n        i0.ɵɵtemplate(2, MonitorComponent_div_2_Template, 7, 3, \"div\", 2);\n        i0.ɵɵtemplate(3, MonitorComponent_div_3_Template, 14, 11, \"div\", 2);\n        i0.ɵɵelementEnd()();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngIf\", ctx.gpuInfo);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.cpuInfo);\n      }\n    },\n    directives: [i2.DefaultLayoutAlignDirective, i2.DefaultLayoutDirective, i2.DefaultLayoutGapDirective, i3.NgIf],\n    pipes: [i3.DecimalPipe],\n    styles: [\"\"]\n  });\n  return MonitorComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}