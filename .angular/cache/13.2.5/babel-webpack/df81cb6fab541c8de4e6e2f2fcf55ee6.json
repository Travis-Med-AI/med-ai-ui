{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component, ViewChild } from '@angular/core';\nimport { FormControl } from '@angular/forms';\nimport { MatPaginator } from '@angular/material/paginator';\nimport { Notifications } from 'med-ai-common';\nimport { LabelDialogComponent } from '../label-dialog/label-dialog.component';\nlet StudiesComponent = class StudiesComponent {\n  constructor(modelService, studyService, evalService, notificationService, deviceService, dialog) {\n    this.modelService = modelService;\n    this.studyService = studyService;\n    this.evalService = evalService;\n    this.notificationService = notificationService;\n    this.deviceService = deviceService;\n    this.dialog = dialog;\n    this.studies = [];\n    this.modelControls = {};\n    this.models$ = this.modelService.getModels();\n    this.displayedColumns = [];\n    this.totalStudies = 0;\n    this.searchControl = new FormControl('');\n    this.orthancStudyCount$ = this.studyService.countOrthancStudies();\n    this.pageIndex = 0;\n    this.pageSize = 10;\n  }\n\n  ngOnInit() {\n    this.fetchStudies(this.pageIndex, this.pageSize);\n    this.searchControl.valueChanges.subscribe(s => {\n      if (this.paginator) {\n        this.paginator.pageIndex = 0;\n      }\n\n      this.fetchStudies(this.pageIndex, this.pageSize);\n    });\n    this.setupColumns();\n    this.notificationService.watchNotificationTypes([Notifications.studyReady]).subscribe(n => this.fetchStudies(this.pageIndex, this.pageSize));\n  }\n\n  setupColumns() {\n    let mobileColumns = ['seriesUid', 'model'];\n    let extraColumns = ['modality', 'studyType'];\n    let actionColumn = ['submit', 'delete'];\n\n    if (this.deviceService.isMobile()) {\n      this.displayedColumns = mobileColumns.concat(actionColumn);\n    } else {\n      this.displayedColumns = mobileColumns.concat(extraColumns, actionColumn);\n    }\n  }\n\n  startEval(study) {\n    let model = this.modelControls[study.orthancStudyId].value;\n    this.evalService.evalDicom(model, study.id).subscribe(res => this.notificationService.showNotification(`Sent request for evaluation of study ${study.id}`));\n  }\n\n  page(pageEvent) {\n    this.fetchStudies(pageEvent.pageIndex, pageEvent.pageSize);\n    this.pageSize = pageEvent.pageSize;\n    this.pageIndex = pageEvent.pageIndex;\n  }\n\n  fetchStudies(pageIndex, pageSize) {\n    this.studyService.getStudies(pageIndex, pageSize, this.searchControl.value).subscribe(studies => {\n      studies.payload.forEach(s => {\n        this.modelControls[s.orthancStudyId] = new FormControl('');\n      });\n      this.totalStudies = studies.total;\n      this.studies = studies.payload;\n    });\n  }\n\n  deleteStudy(study) {\n    this.studyService.deleteStudy(study.id).subscribe(res => this.notificationService.showNotification(`deleted study ${study.id}`));\n  }\n\n  openAddLabels() {\n    const dialogRef = this.dialog.open(LabelDialogComponent, {});\n  }\n\n};\n\n__decorate([ViewChild(MatPaginator, {\n  static: true\n})], StudiesComponent.prototype, \"paginator\", void 0);\n\nStudiesComponent = __decorate([Component({\n  selector: 'app-studies',\n  templateUrl: './studies.component.html',\n  styleUrls: ['./studies.component.scss']\n})], StudiesComponent);\nexport { StudiesComponent };","map":null,"metadata":{},"sourceType":"module"}