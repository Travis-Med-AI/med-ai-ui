{"ast":null,"code":"import { isPlatformBrowser } from '@angular/common';\nimport { EventEmitter, Component, Inject, PLATFORM_ID, ElementRef, Input, Output, Directive, forwardRef, Renderer2, NgModule } from '@angular/core';\nimport { style, animate, AnimationBuilder } from '@angular/animations';\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/animations';\nconst _c0 = [\"ngx-masonry\", \"\"];\nconst _c1 = [\"*\"];\nlet masonryConstructor;\nlet NgxMasonryComponent = /*#__PURE__*/(() => {\n  class NgxMasonryComponent {\n    constructor(platformId, _element) {\n      this.platformId = platformId;\n      this._element = _element;\n      this.updateLayout = false;\n      this.ordered = false; // Outputs\n\n      this.layoutComplete = new EventEmitter();\n      this.removeComplete = new EventEmitter();\n      this.itemsLoaded = new EventEmitter();\n      this.pendingItems = [];\n    }\n\n    ngOnInit() {\n      if (isPlatformBrowser(this.platformId) && masonryConstructor === undefined) {\n        masonryConstructor = require('masonry-layout');\n      } // Create masonry options object\n\n\n      if (!this.options) {\n        this.options = {};\n      } // Set default itemSelector\n\n\n      if (!this.options.itemSelector) {\n        this.options.itemSelector = '[ngxMasonryItem], ngxMasonryItem';\n      }\n\n      this.options['transitionDuration'] = '0s';\n\n      if (isPlatformBrowser(this.platformId)) {\n        // Initialize Masonry\n        this.masonryInstance = new masonryConstructor(this._element.nativeElement, this.options); // Bind to events\n\n        this.masonryInstance.on('layoutComplete', items => {\n          this.layoutComplete.emit(items);\n        });\n        this.masonryInstance.on('removeComplete', items => {\n          this.removeComplete.emit(items);\n        });\n        this.masonryInstance.items = [];\n      }\n    }\n\n    ngOnChanges(changes) {\n      // only update layout if it's not the first change\n      if (changes.updateLayout) {\n        if (!changes.updateLayout.firstChange) {\n          this.layout();\n        }\n      }\n    }\n\n    ngOnDestroy() {\n      if (this.masonryInstance) {\n        this.masonryInstance.destroy();\n      }\n    }\n\n    layout() {\n      setTimeout(() => {\n        this.masonryInstance.layout();\n      });\n    }\n\n    reloadItems() {\n      setTimeout(() => {\n        this.masonryInstance.reloadItems();\n      });\n    }\n\n    addPendingItem(item) {\n      this.pendingItems.push(item);\n    }\n\n    add(newItem) {\n      if (this.ordered) {\n        for (const [index, item] of this.pendingItems.entries()) {\n          if (item) {\n            if (item.images && item.images.size === 0) {\n              this.pendingItems[index] = undefined;\n              this.itemLoaded(item);\n\n              if (index + 1 === this.pendingItems.length) {\n                // All items are loaded\n                this.itemsLoaded.emit(this.pendingItems.length);\n                this.pendingItems = [];\n              }\n            } else {\n              return;\n            }\n          }\n        }\n      } else {\n        this.itemLoaded(newItem);\n      }\n    }\n\n    itemLoaded(item) {\n      if (isPlatformBrowser(this.platformId)) {\n        // Tell Masonry that a child element has been added\n        if (item.prepend) {\n          this.masonryInstance.prepended(item.element.nativeElement);\n        } else {\n          this.masonryInstance.appended(item.element.nativeElement);\n        } // Check if first item\n\n\n        if (this.masonryInstance.items.length === 1) {\n          this.masonryInstance.layout();\n        }\n\n        item.playAnimation(true);\n      }\n    }\n\n    remove(element) {\n      if (isPlatformBrowser(this.platformId)) {\n        // Tell Masonry that a child element has been removed\n        this.masonryInstance.remove(element); // Layout items\n\n        this.layout();\n      }\n    }\n\n  }\n\n  NgxMasonryComponent.ɵfac = function NgxMasonryComponent_Factory(t) {\n    return new (t || NgxMasonryComponent)(ɵngcc0.ɵɵdirectiveInject(PLATFORM_ID), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef));\n  };\n\n  NgxMasonryComponent.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: NgxMasonryComponent,\n    selectors: [[\"\", \"ngx-masonry\", \"\"], [\"ngx-masonry\"]],\n    inputs: {\n      updateLayout: \"updateLayout\",\n      ordered: \"ordered\",\n      options: \"options\"\n    },\n    outputs: {\n      layoutComplete: \"layoutComplete\",\n      removeComplete: \"removeComplete\",\n      itemsLoaded: \"itemsLoaded\"\n    },\n    features: [ɵngcc0.ɵɵNgOnChangesFeature],\n    attrs: _c0,\n    ngContentSelectors: _c1,\n    decls: 1,\n    vars: 0,\n    template: function NgxMasonryComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵprojection(0);\n      }\n    },\n    styles: [\"[_nghost-%COMP%] {\\n\\t\\t\\tdisplay: block;\\n\\t\\t}\"]\n  });\n  return NgxMasonryComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet NgxMasonryDirective = /*#__PURE__*/(() => {\n  class NgxMasonryDirective {\n    constructor(element, builder, parent, renderer) {\n      this.element = element;\n      this.builder = builder;\n      this.parent = parent;\n      this.renderer = renderer;\n      this.prepend = false;\n      this.animations = {\n        show: [style({\n          opacity: 0\n        }), animate('400ms ease-in', style({\n          opacity: 1\n        }))],\n        hide: [style({\n          opacity: '*'\n        }), animate('400ms ease-in', style({\n          opacity: 0\n        }))]\n      };\n    }\n\n    ngOnInit() {\n      if (this.parent.options.animations !== undefined) {\n        this.animations = this.parent.options.animations;\n      }\n\n      this.renderer.setStyle(this.element.nativeElement, 'position', 'fixed');\n      this.renderer.setStyle(this.element.nativeElement, 'right', '-150vw');\n      this.parent.addPendingItem(this);\n    }\n\n    ngAfterViewInit() {\n      const images = Array.from(this.element.nativeElement.getElementsByTagName('img'));\n      this.images = new Set(images);\n\n      if (images.length === 0) {\n        setTimeout(() => {\n          this.parent.add(this);\n        });\n      } else {\n        for (const imageRef of images) {\n          // skip image render check if image has `masonryLazy` attribute\n          if (imageRef.hasAttribute('masonryLazy')) {\n            this.imageLoaded(imageRef);\n          } else {\n            this.renderer.listen(imageRef, 'load', _ => {\n              this.imageLoaded(imageRef);\n            });\n            this.renderer.listen(imageRef, 'error', _ => {\n              this.imageLoaded(imageRef);\n            });\n          }\n        }\n      }\n    }\n\n    ngOnDestroy() {\n      if (this.images && this.images.size === 0 && this.element.nativeElement.parentNode) {\n        this.playAnimation(false);\n        this.parent.remove(this.element.nativeElement);\n      }\n    }\n\n    imageLoaded(image) {\n      this.images.delete(image);\n\n      if (this.images.size === 0) {\n        this.parent.add(this);\n      }\n    }\n\n    playAnimation(show) {\n      const metadata = show ? this.animations.show : this.animations.hide;\n\n      if (metadata) {\n        const player = this.builder.build(metadata).create(this.element.nativeElement);\n        player.play();\n      }\n    }\n\n  }\n\n  NgxMasonryDirective.ɵfac = function NgxMasonryDirective_Factory(t) {\n    return new (t || NgxMasonryDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.AnimationBuilder), ɵngcc0.ɵɵdirectiveInject(forwardRef(() => NgxMasonryComponent)), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2));\n  };\n\n  NgxMasonryDirective.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: NgxMasonryDirective,\n    selectors: [[\"\", \"ngxMasonryItem\", \"\"], [\"ngxMasonryItem\"]],\n    inputs: {\n      prepend: \"prepend\"\n    }\n  });\n  return NgxMasonryDirective;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet NgxMasonryModule = /*#__PURE__*/(() => {\n  class NgxMasonryModule {}\n\n  NgxMasonryModule.ɵfac = function NgxMasonryModule_Factory(t) {\n    return new (t || NgxMasonryModule)();\n  };\n\n  NgxMasonryModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: NgxMasonryModule\n  });\n  NgxMasonryModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n    imports: [[]]\n  });\n  return NgxMasonryModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(NgxMasonryModule, {\n    declarations: [NgxMasonryComponent, NgxMasonryDirective],\n    exports: [NgxMasonryComponent, NgxMasonryDirective]\n  });\n})();\n/*\n * Public API Surface of ngx-masonry\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { NgxMasonryComponent, NgxMasonryDirective, NgxMasonryModule }; //# sourceMappingURL=ngx-masonry.js.map","map":null,"metadata":{},"sourceType":"module"}