{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { RegisterModelComponent } from '../register-model/register-model.component';\nimport { Notifications } from 'med-ai-common';\nimport { DeleteConfirmationComponent } from './delete-confirmation/delete-confirmation.component';\nlet ModelsComponent = class ModelsComponent {\n  constructor(jobService, modelSerivce, notificationService, dialog) {\n    this.jobService = jobService;\n    this.modelSerivce = modelSerivce;\n    this.notificationService = notificationService;\n    this.dialog = dialog;\n    this.jobs = [];\n    this.jobs$ = this.getJobs();\n    this.displayedColumns = ['name', 'lastRun', 'jobToggle'];\n  }\n\n  ngOnInit() {\n    this.notificationService.watchNotificationTypes([Notifications.modelReady]).subscribe(n => this.getJobs());\n  }\n\n  addNew() {\n    this.dialog.open(RegisterModelComponent);\n    this.dialog.afterAllClosed.subscribe(_ => this.getJobs());\n  }\n\n  toggleJob(id, running) {\n    if (running) {\n      this.jobService.killJob(id).subscribe(j => {\n        this.getJobs();\n        this.notificationService.showNotification('Successfully turned job off');\n      });\n    } else {\n      this.jobService.startJob(id).subscribe(j => {\n        this.getJobs();\n        this.notificationService.showNotification('Successfully turned job on');\n      });\n    }\n  }\n\n  getJobs() {\n    this.jobService.getJobs().subscribe(j => this.jobs = j);\n  }\n\n  retry(image) {\n    this.modelSerivce.retryModel(image).subscribe(i => {\n      this.jobService.getJobs();\n      this.notificationService.showNotification('Successfully downloaded');\n    });\n  }\n\n  setAsClassifier(model) {\n    this.modelSerivce.setClassifier(model.image, model.modality).subscribe(res => {\n      this.notificationService.showNotification(`Set ${model.displayName} as classifer for ${model.modality}`);\n    });\n  }\n\n  deleteJob(job) {\n    const dialogRef = this.dialog.open(DeleteConfirmationComponent, {\n      data: {\n        job\n      }\n    });\n    dialogRef.afterClosed().subscribe(result => this.jobService.getJobs());\n  }\n\n  toggleQuickstart(model) {\n    this.modelSerivce.toggleQuickstart(model.id).subscribe(j => {\n      this.getJobs();\n      this.notificationService.showNotification('Successfully toggle job');\n    });\n  }\n\n};\nModelsComponent = __decorate([Component({\n  selector: 'app-models',\n  templateUrl: './models.component.html',\n  styleUrls: ['./models.component.scss']\n})], ModelsComponent);\nexport { ModelsComponent };","map":null,"metadata":{},"sourceType":"module"}